// Generated by rstantools.  Do not edit by hand.

/*
    BPrinStratTTE is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BPrinStratTTE is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BPrinStratTTE.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_m_exp_nocovar_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 79> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 24, column 2 to column 31)",
  " (in 'string', line 25, column 2 to column 27)",
  " (in 'string', line 26, column 2 to column 27)",
  " (in 'string', line 27, column 2 to column 27)",
  " (in 'string', line 28, column 2 to column 27)",
  " (in 'string', line 62, column 2 to column 13)",
  " (in 'string', line 63, column 2 to column 13)",
  " (in 'string', line 64, column 2 to column 15)",
  " (in 'string', line 65, column 2 to column 15)",
  " (in 'string', line 67, column 2 to column 19)",
  " (in 'string', line 68, column 2 to column 19)",
  " (in 'string', line 69, column 2 to column 19)",
  " (in 'string', line 70, column 2 to column 19)",
  " (in 'string', line 71, column 2 to column 16)",
  " (in 'string', line 72, column 2 to column 16)",
  " (in 'string', line 73, column 2 to column 16)",
  " (in 'string', line 74, column 2 to column 16)",
  " (in 'string', line 77, column 2 to column 33)",
  " (in 'string', line 78, column 2 to column 33)",
  " (in 'string', line 82, column 4 to column 55)",
  " (in 'string', line 83, column 4 to column 55)",
  " (in 'string', line 84, column 4 to column 55)",
  " (in 'string', line 85, column 4 to column 55)",
  " (in 'string', line 81, column 18 to line 86, column 3)",
  " (in 'string', line 81, column 2 to line 86, column 3)",
  " (in 'string', line 87, column 2 to column 14)",
  " (in 'string', line 88, column 2 to column 14)",
  " (in 'string', line 89, column 2 to column 14)",
  " (in 'string', line 90, column 2 to column 14)",
  " (in 'string', line 92, column 4 to column 72)",
  " (in 'string', line 93, column 4 to column 72)",
  " (in 'string', line 94, column 4 to column 72)",
  " (in 'string', line 95, column 4 to column 72)",
  " (in 'string', line 91, column 18 to line 96, column 3)",
  " (in 'string', line 91, column 2 to line 96, column 3)",
  " (in 'string', line 97, column 2 to column 29)",
  " (in 'string', line 98, column 2 to column 29)",
  " (in 'string', line 34, column 2 to column 41)",
  " (in 'string', line 35, column 2 to column 45)",
  " (in 'string', line 36, column 2 to column 45)",
  " (in 'string', line 37, column 2 to column 45)",
  " (in 'string', line 38, column 2 to column 45)",
  " (in 'string', line 41, column 11 to column 12)",
  " (in 'string', line 41, column 4 to column 21)",
  " (in 'string', line 53, column 8 to column 74)",
  " (in 'string', line 51, column 37 to line 54, column 7)",
  " (in 'string', line 51, column 13 to line 54, column 7)",
  " (in 'string', line 50, column 8 to column 76)",
  " (in 'string', line 48, column 37 to line 51, column 7)",
  " (in 'string', line 48, column 13 to line 54, column 7)",
  " (in 'string', line 45, column 8 to line 47, column 69)",
  " (in 'string', line 43, column 19 to line 48, column 7)",
  " (in 'string', line 43, column 6 to line 54, column 7)",
  " (in 'string', line 42, column 19 to line 55, column 5)",
  " (in 'string', line 42, column 4 to line 55, column 5)",
  " (in 'string', line 56, column 4 to column 19)",
  " (in 'string', line 40, column 2 to line 57, column 3)",
  " (in 'string', line 4, column 2 to column 29)",
  " (in 'string', line 5, column 2 to column 30)",
  " (in 'string', line 7, column 8 to column 9)",
  " (in 'string', line 7, column 2 to column 38)",
  " (in 'string', line 8, column 8 to column 9)",
  " (in 'string', line 8, column 2 to column 38)",
  " (in 'string', line 9, column 8 to column 9)",
  " (in 'string', line 9, column 2 to column 41)",
  " (in 'string', line 10, column 8 to column 9)",
  " (in 'string', line 10, column 2 to column 42)",
  " (in 'string', line 12, column 2 to column 46)",
  " (in 'string', line 13, column 2 to column 45)",
  " (in 'string', line 14, column 2 to column 45)",
  " (in 'string', line 15, column 2 to column 45)",
  " (in 'string', line 16, column 2 to column 45)",
  " (in 'string', line 19, column 9 to column 11)",
  " (in 'string', line 19, column 2 to column 21)",
  " (in 'string', line 67, column 9 to column 11)",
  " (in 'string', line 68, column 9 to column 11)",
  " (in 'string', line 69, column 9 to column 11)",
  " (in 'string', line 70, column 9 to column 11)"};
#include <stan_meta_header.hpp>
class model_m_exp_nocovar final : public model_base_crtp<model_m_exp_nocovar> {
private:
  int n;
  int tg;
  std::vector<int> Z;
  std::vector<int> S;
  std::vector<double> TIME;
  std::vector<int> EVENT;
  std::vector<double> prior_piT;
  std::vector<double> prior_0N;
  std::vector<double> prior_1N;
  std::vector<double> prior_0T;
  std::vector<double> prior_1T;
  Eigen::Matrix<double,-1,1> t_grid_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> t_grid{nullptr, 0};
public:
  ~model_m_exp_nocovar() {}
  model_m_exp_nocovar(stan::io::var_context& context__, unsigned int
                      random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_m_exp_nocovar_namespace::model_m_exp_nocovar";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 58;
      context__.validate_dims("data initialization", "n", "int",
        std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      current_statement__ = 58;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 58;
      stan::math::check_greater_or_equal(function__, "n", n, 1);
      current_statement__ = 59;
      context__.validate_dims("data initialization", "tg", "int",
        std::vector<size_t>{});
      tg = std::numeric_limits<int>::min();
      current_statement__ = 59;
      tg = context__.vals_i("tg")[(1 - 1)];
      current_statement__ = 59;
      stan::math::check_greater_or_equal(function__, "tg", tg, 1);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("Z", "n", n);
      current_statement__ = 61;
      context__.validate_dims("data initialization", "Z", "int",
        std::vector<size_t>{static_cast<size_t>(n)});
      Z = std::vector<int>(n, std::numeric_limits<int>::min());
      current_statement__ = 61;
      Z = context__.vals_i("Z");
      current_statement__ = 61;
      stan::math::check_greater_or_equal(function__, "Z", Z, 0);
      current_statement__ = 61;
      stan::math::check_less_or_equal(function__, "Z", Z, 1);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("S", "n", n);
      current_statement__ = 63;
      context__.validate_dims("data initialization", "S", "int",
        std::vector<size_t>{static_cast<size_t>(n)});
      S = std::vector<int>(n, std::numeric_limits<int>::min());
      current_statement__ = 63;
      S = context__.vals_i("S");
      current_statement__ = 63;
      stan::math::check_greater_or_equal(function__, "S", S, 0);
      current_statement__ = 63;
      stan::math::check_less_or_equal(function__, "S", S, 1);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("TIME", "n", n);
      current_statement__ = 65;
      context__.validate_dims("data initialization", "TIME", "double",
        std::vector<size_t>{static_cast<size_t>(n)});
      TIME = std::vector<double>(n, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 65;
      TIME = context__.vals_r("TIME");
      current_statement__ = 65;
      stan::math::check_greater_or_equal(function__, "TIME", TIME, 0);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("EVENT", "n", n);
      current_statement__ = 67;
      context__.validate_dims("data initialization", "EVENT", "int",
        std::vector<size_t>{static_cast<size_t>(n)});
      EVENT = std::vector<int>(n, std::numeric_limits<int>::min());
      current_statement__ = 67;
      EVENT = context__.vals_i("EVENT");
      current_statement__ = 67;
      stan::math::check_greater_or_equal(function__, "EVENT", EVENT, 0);
      current_statement__ = 67;
      stan::math::check_less_or_equal(function__, "EVENT", EVENT, 1);
      current_statement__ = 68;
      context__.validate_dims("data initialization", "prior_piT", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      prior_piT = std::vector<double>(2,
                    std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 68;
      prior_piT = context__.vals_r("prior_piT");
      current_statement__ = 68;
      stan::math::check_greater_or_equal(function__, "prior_piT", prior_piT,
        0);
      current_statement__ = 69;
      context__.validate_dims("data initialization", "prior_0N", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      prior_0N = std::vector<double>(2,
                   std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 69;
      prior_0N = context__.vals_r("prior_0N");
      current_statement__ = 69;
      stan::math::check_greater_or_equal(function__, "prior_0N", prior_0N, 0);
      current_statement__ = 70;
      context__.validate_dims("data initialization", "prior_1N", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      prior_1N = std::vector<double>(2,
                   std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 70;
      prior_1N = context__.vals_r("prior_1N");
      current_statement__ = 70;
      stan::math::check_greater_or_equal(function__, "prior_1N", prior_1N, 0);
      current_statement__ = 71;
      context__.validate_dims("data initialization", "prior_0T", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      prior_0T = std::vector<double>(2,
                   std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 71;
      prior_0T = context__.vals_r("prior_0T");
      current_statement__ = 71;
      stan::math::check_greater_or_equal(function__, "prior_0T", prior_0T, 0);
      current_statement__ = 72;
      context__.validate_dims("data initialization", "prior_1T", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      prior_1T = std::vector<double>(2,
                   std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 72;
      prior_1T = context__.vals_r("prior_1T");
      current_statement__ = 72;
      stan::math::check_greater_or_equal(function__, "prior_1T", prior_1T, 0);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("t_grid", "tg", tg);
      current_statement__ = 74;
      context__.validate_dims("data initialization", "t_grid", "double",
        std::vector<size_t>{static_cast<size_t>(tg)});
      t_grid_data__ = Eigen::Matrix<double,-1,1>::Constant(tg,
                        std::numeric_limits<double>::quiet_NaN());
      new (&t_grid)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(t_grid_data__.data(), tg);
      {
        std::vector<local_scalar_t__> t_grid_flat__;
        current_statement__ = 74;
        t_grid_flat__ = context__.vals_r("t_grid");
        current_statement__ = 74;
        pos__ = 1;
        current_statement__ = 74;
        for (int sym1__ = 1; sym1__ <= tg; ++sym1__) {
          current_statement__ = 74;
          stan::model::assign(t_grid, t_grid_flat__[(pos__ - 1)],
            "assigning variable t_grid", stan::model::index_uni(sym1__));
          current_statement__ = 74;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 75;
      stan::math::validate_non_negative_index("S_0N", "tg", tg);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("S_1N", "tg", tg);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("S_0T", "tg", tg);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("S_1T", "tg", tg);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_m_exp_nocovar";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_m_exp_nocovar_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ pi_T = DUMMY_VAR__;
      current_statement__ = 1;
      pi_T = in__.template read_constrain_lub<local_scalar_t__,
               jacobian__>(0, 1, lp__);
      local_scalar_t__ lambda_0N = DUMMY_VAR__;
      current_statement__ = 2;
      lambda_0N = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      local_scalar_t__ lambda_1N = DUMMY_VAR__;
      current_statement__ = 3;
      lambda_1N = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      local_scalar_t__ lambda_0T = DUMMY_VAR__;
      current_statement__ = 4;
      lambda_0T = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      local_scalar_t__ lambda_1T = DUMMY_VAR__;
      current_statement__ = 5;
      lambda_1T = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      {
        current_statement__ = 38;
        lp_accum__.add(stan::math::beta_lpdf<propto__>(pi_T,
                         stan::model::rvalue(prior_piT, "prior_piT",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(prior_piT, "prior_piT",
                           stan::model::index_uni(2))));
        current_statement__ = 39;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(lambda_0N,
                         stan::model::rvalue(prior_0N, "prior_0N",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(prior_0N, "prior_0N",
                           stan::model::index_uni(2))));
        current_statement__ = 40;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(lambda_1N,
                         stan::model::rvalue(prior_1N, "prior_1N",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(prior_1N, "prior_1N",
                           stan::model::index_uni(2))));
        current_statement__ = 41;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(lambda_0T,
                         stan::model::rvalue(prior_0T, "prior_0T",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(prior_0T, "prior_0T",
                           stan::model::index_uni(2))));
        current_statement__ = 42;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(lambda_1T,
                         stan::model::rvalue(prior_1T, "prior_1T",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(prior_1T, "prior_1T",
                           stan::model::index_uni(2))));
        {
          current_statement__ = 43;
          stan::math::validate_non_negative_index("prob", "n", n);
          Eigen::Matrix<local_scalar_t__,-1,1> prob =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n, DUMMY_VAR__);
          current_statement__ = 55;
          for (int i = 1; i <= n; ++i) {
            current_statement__ = 53;
            if (stan::math::logical_eq(
                  stan::model::rvalue(Z, "Z", stan::model::index_uni(i)), 0)) {
              current_statement__ = 51;
              stan::model::assign(prob,
                stan::math::log_mix(pi_T,
                  ((stan::model::rvalue(EVENT, "EVENT",
                      stan::model::index_uni(i)) *
                  stan::math::log(lambda_0T)) - (lambda_0T *
                  stan::model::rvalue(TIME, "TIME", stan::model::index_uni(i)))),
                  ((stan::model::rvalue(EVENT, "EVENT",
                      stan::model::index_uni(i)) *
                  stan::math::log(lambda_0N)) - (lambda_0N *
                  stan::model::rvalue(TIME, "TIME", stan::model::index_uni(i))))),
                "assigning variable prob", stan::model::index_uni(i));
            } else {
              current_statement__ = 50;
              if ((stan::math::primitive_value(
                     stan::math::logical_eq(
                       stan::model::rvalue(Z, "Z", stan::model::index_uni(i)),
                       1))
                  &&
                  stan::math::primitive_value(
                    stan::math::logical_eq(
                      stan::model::rvalue(S, "S", stan::model::index_uni(i)),
                      0)))) {
                current_statement__ = 48;
                stan::model::assign(prob, (stan::math::log1m(pi_T) +
                  ((stan::model::rvalue(EVENT, "EVENT",
                      stan::model::index_uni(i)) *
                  stan::math::log(lambda_1N)) - (lambda_1N *
                  stan::model::rvalue(TIME, "TIME", stan::model::index_uni(i))))),
                  "assigning variable prob", stan::model::index_uni(i));
              } else {
                current_statement__ = 47;
                if ((stan::math::primitive_value(
                       stan::math::logical_eq(
                         stan::model::rvalue(Z, "Z",
                           stan::model::index_uni(i)), 1))
                    &&
                    stan::math::primitive_value(
                      stan::math::logical_eq(
                        stan::model::rvalue(S, "S", stan::model::index_uni(i)),
                        1)))) {
                  current_statement__ = 45;
                  stan::model::assign(prob, (stan::math::log(pi_T) +
                    ((stan::model::rvalue(EVENT, "EVENT",
                        stan::model::index_uni(i)) *
                    stan::math::log(lambda_1T)) - (lambda_1T *
                    stan::model::rvalue(TIME, "TIME",
                      stan::model::index_uni(i))))),
                    "assigning variable prob", stan::model::index_uni(i));
                }
              }
            }
          }
          current_statement__ = 56;
          lp_accum__.add(prob);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_m_exp_nocovar_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double pi_T = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      pi_T = in__.template read_constrain_lub<local_scalar_t__,
               jacobian__>(0, 1, lp__);
      double lambda_0N = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      lambda_0N = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      double lambda_1N = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      lambda_1N = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      double lambda_0T = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      lambda_0T = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      double lambda_1T = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      lambda_1T = in__.template read_constrain_lb<local_scalar_t__,
                    jacobian__>(0, lp__);
      out__.write(pi_T);
      out__.write(lambda_0N);
      out__.write(lambda_1N);
      out__.write(lambda_0T);
      out__.write(lambda_1T);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      double hr_N = std::numeric_limits<double>::quiet_NaN();
      double hr_T = std::numeric_limits<double>::quiet_NaN();
      double rmst_N = std::numeric_limits<double>::quiet_NaN();
      double rmst_T = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double,-1,1> S_0N =
        Eigen::Matrix<double,-1,1>::Constant(tg,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> S_1N =
        Eigen::Matrix<double,-1,1>::Constant(tg,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> S_0T =
        Eigen::Matrix<double,-1,1>::Constant(tg,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> S_1T =
        Eigen::Matrix<double,-1,1>::Constant(tg,
          std::numeric_limits<double>::quiet_NaN());
      double rmst_0N = std::numeric_limits<double>::quiet_NaN();
      double rmst_1N = std::numeric_limits<double>::quiet_NaN();
      double rmst_0T = std::numeric_limits<double>::quiet_NaN();
      double rmst_1T = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 18;
      hr_N = (lambda_1N / lambda_0N);
      current_statement__ = 19;
      hr_T = (lambda_1T / lambda_0T);
      current_statement__ = 25;
      for (int t = 1; t <= tg; ++t) {
        current_statement__ = 20;
        stan::model::assign(S_0N, (1 -
          stan::math::exponential_cdf(
            stan::model::rvalue(t_grid, "t_grid", stan::model::index_uni(t)),
            lambda_0N)), "assigning variable S_0N", stan::model::index_uni(t));
        current_statement__ = 21;
        stan::model::assign(S_1N, (1 -
          stan::math::exponential_cdf(
            stan::model::rvalue(t_grid, "t_grid", stan::model::index_uni(t)),
            lambda_1N)), "assigning variable S_1N", stan::model::index_uni(t));
        current_statement__ = 22;
        stan::model::assign(S_0T, (1 -
          stan::math::exponential_cdf(
            stan::model::rvalue(t_grid, "t_grid", stan::model::index_uni(t)),
            lambda_0T)), "assigning variable S_0T", stan::model::index_uni(t));
        current_statement__ = 23;
        stan::model::assign(S_1T, (1 -
          stan::math::exponential_cdf(
            stan::model::rvalue(t_grid, "t_grid", stan::model::index_uni(t)),
            lambda_1T)), "assigning variable S_1T", stan::model::index_uni(t));
      }
      current_statement__ = 26;
      rmst_0N = 0;
      current_statement__ = 27;
      rmst_1N = 0;
      current_statement__ = 28;
      rmst_0T = 0;
      current_statement__ = 29;
      rmst_1T = 0;
      current_statement__ = 35;
      for (int j = 2; j <= tg; ++j) {
        current_statement__ = 30;
        rmst_0N = (rmst_0N +
          (((stan::model::rvalue(S_0N, "S_0N",
               stan::model::index_uni((j - 1)))
          + stan::model::rvalue(S_0N, "S_0N", stan::model::index_uni(j))) /
          2) *
          (stan::model::rvalue(t_grid, "t_grid", stan::model::index_uni(j)) -
          stan::model::rvalue(t_grid, "t_grid",
            stan::model::index_uni((j - 1))))));
        current_statement__ = 31;
        rmst_1N = (rmst_1N +
          (((stan::model::rvalue(S_1N, "S_1N",
               stan::model::index_uni((j - 1)))
          + stan::model::rvalue(S_1N, "S_1N", stan::model::index_uni(j))) /
          2) *
          (stan::model::rvalue(t_grid, "t_grid", stan::model::index_uni(j)) -
          stan::model::rvalue(t_grid, "t_grid",
            stan::model::index_uni((j - 1))))));
        current_statement__ = 32;
        rmst_0T = (rmst_0T +
          (((stan::model::rvalue(S_0T, "S_0T",
               stan::model::index_uni((j - 1)))
          + stan::model::rvalue(S_0T, "S_0T", stan::model::index_uni(j))) /
          2) *
          (stan::model::rvalue(t_grid, "t_grid", stan::model::index_uni(j)) -
          stan::model::rvalue(t_grid, "t_grid",
            stan::model::index_uni((j - 1))))));
        current_statement__ = 33;
        rmst_1T = (rmst_1T +
          (((stan::model::rvalue(S_1T, "S_1T",
               stan::model::index_uni((j - 1)))
          + stan::model::rvalue(S_1T, "S_1T", stan::model::index_uni(j))) /
          2) *
          (stan::model::rvalue(t_grid, "t_grid", stan::model::index_uni(j)) -
          stan::model::rvalue(t_grid, "t_grid",
            stan::model::index_uni((j - 1))))));
      }
      current_statement__ = 36;
      rmst_N = (rmst_1N - rmst_0N);
      current_statement__ = 37;
      rmst_T = (rmst_1T - rmst_0T);
      out__.write(hr_N);
      out__.write(hr_T);
      out__.write(rmst_N);
      out__.write(rmst_T);
      out__.write(S_0N);
      out__.write(S_1N);
      out__.write(S_0T);
      out__.write(S_1T);
      out__.write(rmst_0N);
      out__.write(rmst_1N);
      out__.write(rmst_0T);
      out__.write(rmst_1T);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ pi_T = DUMMY_VAR__;
      current_statement__ = 1;
      pi_T = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, pi_T);
      local_scalar_t__ lambda_0N = DUMMY_VAR__;
      current_statement__ = 2;
      lambda_0N = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, lambda_0N);
      local_scalar_t__ lambda_1N = DUMMY_VAR__;
      current_statement__ = 3;
      lambda_1N = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, lambda_1N);
      local_scalar_t__ lambda_0T = DUMMY_VAR__;
      current_statement__ = 4;
      lambda_0T = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, lambda_0T);
      local_scalar_t__ lambda_1T = DUMMY_VAR__;
      current_statement__ = 5;
      lambda_1T = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, lambda_1T);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "pi_T", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "lambda_0N",
        "double", std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "lambda_1N",
        "double", std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "lambda_0T",
        "double", std::vector<size_t>{});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "lambda_1T",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ pi_T = DUMMY_VAR__;
      current_statement__ = 1;
      pi_T = context__.vals_r("pi_T")[(1 - 1)];
      out__.write_free_lub(0, 1, pi_T);
      local_scalar_t__ lambda_0N = DUMMY_VAR__;
      current_statement__ = 2;
      lambda_0N = context__.vals_r("lambda_0N")[(1 - 1)];
      out__.write_free_lb(0, lambda_0N);
      local_scalar_t__ lambda_1N = DUMMY_VAR__;
      current_statement__ = 3;
      lambda_1N = context__.vals_r("lambda_1N")[(1 - 1)];
      out__.write_free_lb(0, lambda_1N);
      local_scalar_t__ lambda_0T = DUMMY_VAR__;
      current_statement__ = 4;
      lambda_0T = context__.vals_r("lambda_0T")[(1 - 1)];
      out__.write_free_lb(0, lambda_0T);
      local_scalar_t__ lambda_1T = DUMMY_VAR__;
      current_statement__ = 5;
      lambda_1T = context__.vals_r("lambda_1T")[(1 - 1)];
      out__.write_free_lb(0, lambda_1T);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"pi_T", "lambda_0N", "lambda_1N",
                "lambda_0T", "lambda_1T"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"hr_N", "hr_T", "rmst_N", "rmst_T", "S_0N", "S_1N", "S_0T",
             "S_1T", "rmst_0N", "rmst_1N", "rmst_0T", "rmst_1T"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(tg)},
             std::vector<size_t>{static_cast<size_t>(tg)},
             std::vector<size_t>{static_cast<size_t>(tg)},
             std::vector<size_t>{static_cast<size_t>(tg)},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}, std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "pi_T");
    param_names__.emplace_back(std::string() + "lambda_0N");
    param_names__.emplace_back(std::string() + "lambda_1N");
    param_names__.emplace_back(std::string() + "lambda_0T");
    param_names__.emplace_back(std::string() + "lambda_1T");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "hr_N");
      param_names__.emplace_back(std::string() + "hr_T");
      param_names__.emplace_back(std::string() + "rmst_N");
      param_names__.emplace_back(std::string() + "rmst_T");
      for (int sym1__ = 1; sym1__ <= tg; ++sym1__) {
        param_names__.emplace_back(std::string() + "S_0N" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= tg; ++sym1__) {
        param_names__.emplace_back(std::string() + "S_1N" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= tg; ++sym1__) {
        param_names__.emplace_back(std::string() + "S_0T" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= tg; ++sym1__) {
        param_names__.emplace_back(std::string() + "S_1T" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "rmst_0N");
      param_names__.emplace_back(std::string() + "rmst_1N");
      param_names__.emplace_back(std::string() + "rmst_0T");
      param_names__.emplace_back(std::string() + "rmst_1T");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "pi_T");
    param_names__.emplace_back(std::string() + "lambda_0N");
    param_names__.emplace_back(std::string() + "lambda_1N");
    param_names__.emplace_back(std::string() + "lambda_0T");
    param_names__.emplace_back(std::string() + "lambda_1T");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "hr_N");
      param_names__.emplace_back(std::string() + "hr_T");
      param_names__.emplace_back(std::string() + "rmst_N");
      param_names__.emplace_back(std::string() + "rmst_T");
      for (int sym1__ = 1; sym1__ <= tg; ++sym1__) {
        param_names__.emplace_back(std::string() + "S_0N" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= tg; ++sym1__) {
        param_names__.emplace_back(std::string() + "S_1N" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= tg; ++sym1__) {
        param_names__.emplace_back(std::string() + "S_0T" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= tg; ++sym1__) {
        param_names__.emplace_back(std::string() + "S_1T" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "rmst_0N");
      param_names__.emplace_back(std::string() + "rmst_1N");
      param_names__.emplace_back(std::string() + "rmst_0T");
      param_names__.emplace_back(std::string() + "rmst_1T");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"pi_T\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda_0N\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda_1N\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda_0T\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda_1T\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"hr_N\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"hr_T\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rmst_N\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rmst_T\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"S_0N\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tg) + "},\"block\":\"generated_quantities\"},{\"name\":\"S_1N\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tg) + "},\"block\":\"generated_quantities\"},{\"name\":\"S_0T\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tg) + "},\"block\":\"generated_quantities\"},{\"name\":\"S_1T\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tg) + "},\"block\":\"generated_quantities\"},{\"name\":\"rmst_0N\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rmst_1N\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rmst_0T\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rmst_1T\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"pi_T\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda_0N\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda_1N\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda_0T\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda_1T\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"hr_N\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"hr_T\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rmst_N\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rmst_T\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"S_0N\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tg) + "},\"block\":\"generated_quantities\"},{\"name\":\"S_1N\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tg) + "},\"block\":\"generated_quantities\"},{\"name\":\"S_0T\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tg) + "},\"block\":\"generated_quantities\"},{\"name\":\"S_1T\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(tg) + "},\"block\":\"generated_quantities\"},{\"name\":\"rmst_0N\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rmst_1N\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rmst_0T\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rmst_1T\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((1 + 1) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((((((1 + 1) + 1) + 1) + tg) + tg) + tg) + tg) + 1) + 1) + 1) +
      1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((1 + 1) + 1) + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((((((1 + 1) + 1) + 1) + tg) + tg) + tg) + tg) + 1) + 1) + 1) +
      1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_m_exp_nocovar_namespace::model_m_exp_nocovar;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_m_exp_nocovar_namespace::profiles__;
}
#endif
#endif
